<?xml version="1.0" encoding="UTF-8"?>
<model version="5.0.0" links="0">
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="EinAus" superclass="qpn::QActive">
   <attribute name="wert" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="rot" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="gruen" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="blau" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="programm" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="led_index" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="led" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="helligkeit" type="uint8_t" visibility="0x02" properties="0x00"/>
   <statechart properties="0x01">
    <initial target="../1">
     <initial_glyph conn="2,2,5,0,40,2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="LedProgramm">
     <tran trig="START" target="../4">
      <action brief="sende &quot;Bereit&quot;, wert = 0">Serial.println(F(&quot;s&quot;));
me-&gt;wert = 0;</action>
      <tran_glyph conn="2,10,3,0,20,2">
       <action box="0,-2,23,2"/>
      </tran_glyph>
     </tran>
     <state name="Anzeige">
      <entry brief="Anzeige">showColor(PIXELS, me-&gt;rot, me-&gt;gruen, me-&gt;blau);</entry>
      <state_glyph node="4,46,10,6">
       <entry box="1,2,9,2"/>
      </state_glyph>
     </state>
     <state name="Dimmen">
      <entry brief="Dimmen">QActive_armX(&amp;me-&gt;super, 0U, DIMMENTAKT, 0U);

showColor(PIXELS, 
    me-&gt;rot / 255.0 * me-&gt;helligkeit, 
    me-&gt;gruen / 255.0 * me-&gt;helligkeit, 
    me-&gt;blau / 255.0 * me-&gt;helligkeit);</entry>
      <exit>QActive_disarmX(&amp;me-&gt;super, 0U);</exit>
      <tran trig="Q_TIMEOUT" target="..">
       <action>me-&gt;helligkeit++;</action>
       <tran_glyph conn="18,56,3,1,10">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="18,46,10,12">
       <entry box="1,2,9,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state name="Lauflicht">
      <entry>QActive_armX(&amp;me-&gt;super, 0U, LAUFLICHTTAKT, 0U);

noInterrupts();
for (me-&gt;led = 0; me-&gt;led &lt; PIXELS; me-&gt;led++) {
    if (me-&gt;led == me-&gt;led_index) {
        sendPixel(me-&gt;rot, me-&gt;gruen, me-&gt;blau);
        }
    else {
        sendPixel(0, 0, 0);
        }
    }
interrupts();
show();</entry>
      <exit>QActive_disarmX(&amp;me-&gt;super, 0U);</exit>
      <tran trig="Q_TIMEOUT" target="..">
       <action>if (me-&gt;led_index &lt; PIXELS - 1U) {
    me-&gt;led_index++;
    }
else {
    me-&gt;led_index = 0;
    }</action>
       <tran_glyph conn="32,56,3,1,10">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="32,46,10,12">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state name="Empfang">
      <tran trig="WERT">
       <action brief="wert-Verarbeitung">uint8_t N;
N = (uint8_t)(Q_PAR(me));

me-&gt;wert *= 10;
me-&gt;wert += N - '0';</action>
       <tran_glyph conn="4,18,3,-1,18">
        <action box="0,-2,18,2"/>
       </tran_glyph>
      </tran>
      <tran trig="R">
       <action brief="wert -&gt; rot">me-&gt;rot = me-&gt;wert;</action>
       <tran_glyph conn="4,22,3,-1,18">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="G">
       <action brief="wert -&gt; gruen">me-&gt;gruen = me-&gt;wert;</action>
       <tran_glyph conn="4,26,3,-1,18">
        <action box="0,-2,13,2"/>
       </tran_glyph>
      </tran>
      <tran trig="B">
       <action brief="wert -&gt; blau">me-&gt;blau = me-&gt;wert;</action>
       <tran_glyph conn="4,30,3,-1,18">
        <action box="0,-2,12,2"/>
       </tran_glyph>
      </tran>
      <tran trig="P">
       <action brief="wert -&gt; programm">me-&gt;programm = me-&gt;wert;</action>
       <tran_glyph conn="4,34,3,-1,18">
        <action box="0,-2,15,2"/>
       </tran_glyph>
      </tran>
      <tran trig="STOPP">
       <action brief="sende &quot;Fertig&quot;">Serial.println(F(&quot;a&quot;));</action>
       <choice target="../../../1">
        <guard brief="Anzeige">me-&gt;programm == 1</guard>
        <choice_glyph conn="26,41,4,0,3,-20,2">
         <action box="-22,1,8,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../../2">
        <guard brief="Dimmen">me-&gt;programm == 2</guard>
        <choice_glyph conn="26,41,4,0,5">
         <action box="-8,1,8,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../../3">
        <guard brief="Lauflicht">me-&gt;programm == 3</guard>
        <choice_glyph conn="26,41,4,0,3,14,2">
         <action box="6,1,9,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,38,3,-1,22,3">
        <action box="0,-2,17,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,12,20,28"/>
     </state>
     <state_glyph node="2,4,42,56"/>
    </state>
    <state_diagram size="46,62"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="EinAus.ino">
   <text>#include &quot;qpn.h&quot;     // QP-nano framework

#include &lt;NeoPixels_SPI.h&gt; // from Nick Gammon, Pin 11 = MOSI

//============================================================================
// declare all AO classes...
$declare(AOs::EinAus)
//...

// AO instances and event queue buffers for them...
EinAus AO_EinAus;
static QEvt l_einausQSto[10]; // Event queue storage for EinAus
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,          (QEvt *)0,    0U                  },
    { (QActive *)&amp;AO_EinAus, l_einausQSto, Q_DIM(l_einausQSto) }
};

//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 100, // number of system clock ticks in one second
    LED_L = 13,              // the pin number of the on-board LED (L)
    PIXELS = 8,              // NeoPixel-Stick
    LAUFLICHTTAKT = BSP_TICKS_PER_SEC,
    DIMMENTAKT = BSP_TICKS_PER_SEC / 64U
};

// various signals for the application...
enum {
    START_SIG,               // Handy will senden
    WERT_SIG,                // Farb-, bzw. Programmwert
    R_SIG,                   // Rotwert einstellen
    G_SIG,                   // Grünwert einstellen
    B_SIG,                   // Blauwert einstellen
    P_SIG,                   // Programmwert einstellen
    STOPP_SIG                // Handyübertragung ist beendet
};

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_EinAus.super, Q_STATE_CAST(&amp;EinAus_initial));

    // initialize the hardware used in this sketch...
    pinMode(LED_L, OUTPUT); // set the LED-L pin to output

    Serial.begin(115200); // set the highest standard baud rate of 115200 bps
    Serial.print(F(&quot;Start, QP-nano version: &quot;));
    Serial.println(QP_VERSION);
    Serial.println(&quot;&quot;);
    Serial.println(F(&quot;Led&quot;));
    Serial.println(&quot;&quot;);
    Serial.println(F(&quot;Startzeichen = &lt;&quot;));
    Serial.println(F(&quot;Wert = 0 - 9 &amp; Farbe = r, g, b || Programm = p&quot;));
    Serial.println(F(&quot;Stoppzeichen = &gt;&quot;));
    Serial.println(&quot;&quot;);

    ledsetup(); // Setup SPI
    showColor(PIXELS, 0, 0, 0);  // alle Led aus
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER2_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0

    // read inputs over Serial
    if (Serial.available() &gt; 0) {
        uint8_t n = Serial.read();
        switch (n) { // read the incoming byte
            // events are posted directly instead of publishing
            case '&lt;':
                QACTIVE_POST_ISR((QMActive *)&amp;AO_EinAus, START_SIG, 0U);
                break;
            case '0' ... '9':
                // empfangener Wert wird übergegeben
                QACTIVE_POST_ISR((QMActive *)&amp;AO_EinAus, WERT_SIG, n);
                break;
            case 'r':
                QACTIVE_POST_ISR((QMActive *)&amp;AO_EinAus, R_SIG, 0U);
                break;
            case 'g':
                QACTIVE_POST_ISR((QMActive *)&amp;AO_EinAus, G_SIG, 0U);
                break;
            case 'b':
                QACTIVE_POST_ISR((QMActive *)&amp;AO_EinAus, B_SIG, 0U);
                break;
            case 'p':
                QACTIVE_POST_ISR((QMActive *)&amp;AO_EinAus, P_SIG, 0U);
                break;
            case '&gt;':
                QACTIVE_POST_ISR((QMActive *)&amp;AO_EinAus, STOPP_SIG, 0U);
                break;
        }
    }
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
    TCCR2A = (1U &lt;&lt; WGM21) | (0U &lt;&lt; WGM20);
    TCCR2B = (1U &lt;&lt; CS22 ) | (1U &lt;&lt; CS21) | (1U &lt;&lt; CS20); // 1/2^10
    ASSR  &amp;= ~(1U &lt;&lt; AS2);
    TIMSK2 = (1U &lt;&lt; OCIE2A); // enable TIMER2 compare Interrupt
    TCNT2  = 0U;

    // set the output-compare register based on the desired tick frequency
    OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}
//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
$define(AOs::EinAus)
//...
</text>
  </file>
 </directory>
</model>
