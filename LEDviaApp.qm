<?xml version="1.0" encoding="UTF-8"?>
<model version="4.3.0" links="0">
 <documentation>Prototyp of controlling a LED stripe with an Arduino from a handy with Bluetooth communication.
For the reason that the Bluetooth communication needs interrupts, but the controlling of the LED stripe forbids it, the communication and the controlling has to be split into two branches.

The handy app sends only one char byte as a request, because that reaches the Serial receive Buffer of the Arduino by hardware design (max. two bytes are possible).

To set the 120 pixel LED stripe, there are around 369 µs of time needed (according to Nick Gammon).
The communication check time tick has to be longer than this, to not disturb the setting. For now the communication tick is 20 ms long.

Calculations:
1 SPI bit = two processor clock cycles = 16 MHz / 2 = 8 MHz = 8000000 * 1 / s = 1 / 8000000 s = 0,000000125 s = 0,000125 µs = 0,125 ms = 125 ns
1 byte = 8 * SPI bit = 8 * 125 ns = 1000 ns
1 rgb-pixel = 3 * byte = 3 * 1000 ns = 3000 ns
120 rgb-pixel = 120 * rgb-pixel = 120 * 3000 ns = 360000 ns = 360 µs = 0,36 ms
to set LED stripe = 120 rgb-pixel + 9 µs reset = 360 µs + 9 µs = 369 µs = 0,369 ms

The stopping of the communication tick with &quot;QActive_disarmX((QActive *)me, 0U);&quot; is optinal, because the timer is an one shot event. But the author of the framework supposes it, because of a clean programing.</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="LEDviaApp" superclass="qpn::QActive">
   <documentation>use for debuging:
digitalWrite(DEBUG_L, HIGH);
digitalWrite(DEBUG_L, LOW);</documentation>
   <attribute name="value" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>for all transmitted values</documentation>
   </attribute>
   <attribute name="red" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>for the transmitted red value</documentation>
   </attribute>
   <attribute name="green" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>for the transmitted green value</documentation>
   </attribute>
   <attribute name="blue" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>for the transmitted blue value</documentation>
   </attribute>
   <attribute name="program" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>for the transmitted program</documentation>
   </attribute>
   <attribute name="led_index" type="uint16_t" visibility="0x02" properties="0x00">
    <documentation>index of the LED in the stripe

The variable is often used but without causing conflicts because everytime it is initialized new.</documentation>
   </attribute>
   <attribute name="brightness" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>for the brightness value</documentation>
   </attribute>
   <attribute name="dim_up" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>flag for dimming direction
0U = up, 1U = down</documentation>
   </attribute>
   <attribute name="rain_x" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>variable for Nick Gammon's rainbow</documentation>
   </attribute>
   <attribute name="splash_x" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>processed LED of the stripe for the splash animation</documentation>
   </attribute>
   <attribute name="run_x" type="uint16_t" visibility="0x02" properties="0x00">
    <documentation>processed LED of the stripe for the run animation</documentation>
   </attribute>
   <attribute name="run_bwd" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>flag for running light direction
0U = forward, 1U = backward</documentation>
   </attribute>
   <attribute name="run_nr" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>number of LED that run

if more than 256 PIXELS type must be raised</documentation>
   </attribute>
   <attribute name="run_nr_index" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>index of the LED of the running group

if more than 256 PIXELS type must be raised</documentation>
   </attribute>
   <attribute name="com_counter" type="uint8_t" visibility="0x02" properties="0x00">
    <documentation>counter to guard the communication</documentation>
   </attribute>
   <statechart>
    <initial target="../1">
     <action brief="init variables">me-&gt;run_nr = 1U;
me-&gt;run_x = zero;</action>
     <initial_glyph conn="2,2,4,3,3,2">
      <action box="1,-1,12,2"/>
     </initial_glyph>
    </initial>
    <state name="LEDcontrol">
     <documentation>First is checked, whether there is a request from the handy in the receive buffer of the USART. If so, a transmit order is send to the handy and it is changed into the communication state. If not, it is changed into  the active program substate.

Periodically a time tick is generated to recheck the receive buffer. This timer is also used to progress the LED programs with animations.</documentation>
     <entry brief="communication check, program choice, start communication tick">if (Serial.read() == 'R') {
    Serial.print(F(&quot;T&quot;));
    QACTIVE_POST((QActive *)me, COMMUNICATION_SIG, 0U);
}
else {
    if (me-&gt;program == 1U)
        QACTIVE_POST((QActive *)me, COLOUR_SIG, 0U);
    else if (me-&gt;program == 2U)
        QACTIVE_POST((QActive *)me, DIM_SIG, 0U);
    else if (me-&gt;program == 3U)
        QACTIVE_POST((QActive *)me, RAINBOW_SIG, 0U);
    else if (me-&gt;program == 4U)
        QACTIVE_POST((QActive *)me, FLASH_SIG, 0U);
    else if (me-&gt;program == 5U)
        QACTIVE_POST((QActive *)me, SPLASH_SIG, 0U);
    else if (me-&gt;program == 6U)
        QACTIVE_POST((QActive *)me, SNOW_SIG, 0U);
    else if (me-&gt;program == 7U)
        QACTIVE_POST((QActive *)me, RUN_SIG, 0U);
    else if (me-&gt;program == 8U) {
        if (me-&gt;run_nr &gt; 1U) { // never 0
            me-&gt;run_nr--;
        }
        me-&gt;program = 7U;
        QACTIVE_POST((QActive *)me, RUN_SIG, 0U);
    }
    else if (me-&gt;program == 9U) {
        if (me-&gt;run_nr &lt; PIXELS) { // never beyond PIXELS
            me-&gt;run_nr++;
        }
        me-&gt;program = 7U;
        QACTIVE_POST((QActive *)me, RUN_SIG, 0U);
    }
}

QActive_armX((QActive *)me, 0U, COMMUNICATION_TICK, 0U);</entry>
     <exit brief="stop communication tick">QActive_disarmX((QActive *)me, 0U);</exit>
     <tran trig="COMMUNICATION" target="../../2">
      <action brief="init com_counter">me-&gt;com_counter = 0U;</action>
      <tran_glyph conn="4,18,3,3,36">
       <action box="0,-4,14,4"/>
      </tran_glyph>
     </tran>
     <tran trig="COLOUR" target="../9">
      <tran_glyph conn="4,22,3,3,13">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <tran trig="DIM">
      <choice target="../../10">
       <guard brief="up">!me-&gt;dim_up</guard>
       <choice_glyph conn="11,30,5,3,6">
        <action box="1,-2,4,2"/>
       </choice_glyph>
      </choice>
      <choice target="../../11">
       <guard brief="down">else</guard>
       <choice_glyph conn="11,30,4,3,12,6">
        <action box="0,10,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="4,30,3,-1,7">
       <action box="0,-2,5,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RAINBOW" target="../12">
      <tran_glyph conn="4,54,3,3,13">
       <action box="0,-2,9,2"/>
      </tran_glyph>
     </tran>
     <tran trig="FLASH" target="../13">
      <tran_glyph conn="4,64,3,3,13">
       <action box="0,-2,7,2"/>
      </tran_glyph>
     </tran>
     <tran trig="SPLASH" target="../14">
      <tran_glyph conn="4,72,3,3,13">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <tran trig="SNOW" target="../15">
      <tran_glyph conn="4,82,3,3,13">
       <action box="0,-2,7,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RUN">
      <choice target="../../16">
       <guard brief="fwd">!me-&gt;run_bwd</guard>
       <choice_glyph conn="11,92,5,3,6">
        <action box="1,-2,5,2"/>
       </choice_glyph>
      </choice>
      <choice target="../../17">
       <guard brief="bwd">else</guard>
       <choice_glyph conn="11,92,4,3,14,6">
        <action box="0,12,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="4,92,3,-1,7">
       <action box="0,-2,5,2"/>
      </tran_glyph>
     </tran>
     <tran trig="Q_TIMEOUT" target="..">
      <tran_glyph conn="36,120,1,3,-32">
       <action box="-10,-2,11,2"/>
      </tran_glyph>
     </tran>
     <state name="colour">
      <documentation>just show the adjusted colours</documentation>
      <entry brief="show LED colour">showColor(PIXELS, me-&gt;red, me-&gt;green, me-&gt;blue);</entry>
      <state_glyph node="17,20,17,6">
       <entry box="1,2,16,2"/>
      </state_glyph>
     </state>
     <state name="dim_up">
      <documentation>The colours are multiplicated with an incrementing brightness value.

At exit the brightness is incremented.
If the brightness reaches an upper limit, the direction flag is set true to change the direction.</documentation>
      <entry brief="dim LED">showColor(PIXELS,
    me-&gt;red / 255.0 * me-&gt;brightness,
    me-&gt;green / 255.0 * me-&gt;brightness,
    me-&gt;blue / 255.0 * me-&gt;brightness
);</entry>
      <exit brief="inc brightness, check dim direction">me-&gt;brightness = me-&gt;brightness + 8U;

if (me-&gt;brightness &gt; 246U) {
    me-&gt;dim_up = 1U;
}</exit>
      <state_glyph node="17,28,17,10">
       <entry box="1,2,9,3"/>
       <exit box="1,5,15,4"/>
      </state_glyph>
     </state>
     <state name="dim_down">
      <documentation>The colours are multiplicated with an decrementing brightness value.

At exit the brightness is decremented.
If the brightness reaches a lower limit, the direction flag is set false to change the direction.</documentation>
      <entry brief="dim LED">showColor(PIXELS,
    me-&gt;red / 255.0 * me-&gt;brightness,
    me-&gt;green / 255.0 * me-&gt;brightness,
    me-&gt;blue / 255.0 * me-&gt;brightness
);</entry>
      <exit brief="dec brightness, check dim direction">me-&gt;brightness = me-&gt;brightness - 8U;

if (me-&gt;brightness &lt; 10U) {
    me-&gt;dim_up = 0U;
}</exit>
      <state_glyph node="17,40,17,10">
       <entry box="1,2,9,3"/>
       <exit box="1,5,15,4"/>
      </state_glyph>
     </state>
     <state name="rainbow">
      <documentation>adapted from Nick Gammon</documentation>
      <entry brief="calculate colour, run rainbow">// cycle the starting point
if (me-&gt;rain_x == 255U) {
    me-&gt;rain_x = 0U;
}
else {
    me-&gt;rain_x++;
}

// build into in-memory array, as these calculations take too long to do on the fly
for (me-&gt;led_index = 0U; me-&gt;led_index &lt; PIXELS; me-&gt;led_index++) {
    byte r, g, b;
    Wheel ((me-&gt;led_index + me-&gt;rain_x) &amp; 255U, r, g, b);
    pixelArray [me-&gt;led_index].r = r;
    pixelArray [me-&gt;led_index].g = g;
    pixelArray [me-&gt;led_index].b = b;
}

// now show results
QF_INT_DISABLE();
for (me-&gt;led_index = 0U; me-&gt;led_index &lt; PIXELS; me-&gt;led_index++) {
    sendPixel (pixelArray [me-&gt;led_index].r, pixelArray [me-&gt;led_index].g, pixelArray [me-&gt;led_index].b);
}
QF_INT_ENABLE();

show();
// end of for each cycle</entry>
      <state_glyph node="17,52,17,8">
       <entry box="1,2,14,4"/>
      </state_glyph>
     </state>
     <state name="flash">
      <documentation>show colour by cyclic random</documentation>
      <entry brief="flash LED">showColor(PIXELS,
    me-&gt;red = random(255U),
    me-&gt;green = random(255U),
    me-&gt;blue = random(255U)
);</entry>
      <state_glyph node="17,62,17,6">
       <entry box="1,2,11,2"/>
      </state_glyph>
     </state>
     <state name="splash">
      <documentation>show colour for single LED by cyclic random

Because of the strict timing of the SPI bus while sending the colour values to the whole LED stripe, the interrupts has to be shut off. At the end of the sending, a short blocking dealy is necessary, as a reset for the stripe to show the colours (s. Nick Gammon).</documentation>
      <entry brief="calculate LED, splash LED">me-&gt;splash_x = random(PIXELS - 1U);

// build into in-memory array, as these calculations take too long to do on the fly
for (me-&gt;led_index = 0U; me-&gt;led_index &lt; PIXELS; me-&gt;led_index++) {
    if (me-&gt;led_index == me-&gt;splash_x) {
        pixelArray [me-&gt;led_index].r = random(255U);
        pixelArray [me-&gt;led_index].g = random(255U);
        pixelArray [me-&gt;led_index].b = random(255U);
    }
    else {
        pixelArray [me-&gt;led_index].r = 0U;
        pixelArray [me-&gt;led_index].g = 0U;
        pixelArray [me-&gt;led_index].b = 0U;
    }
}

// now show results
QF_INT_DISABLE();
for (me-&gt;led_index = 0U; me-&gt;led_index &lt; PIXELS; me-&gt;led_index++) {
    sendPixel (pixelArray [me-&gt;led_index].r, pixelArray [me-&gt;led_index].g, pixelArray [me-&gt;led_index].b);
}
QF_INT_ENABLE();

show();</entry>
      <state_glyph node="17,70,17,8">
       <entry box="1,2,13,4"/>
      </state_glyph>
     </state>
     <state name="snow">
      <documentation>randomly snowing

Because of the strict timing of the SPI bus while sending the colour values to the whole LED stripe, the interrupts has to be shut off. At the end of the sending, a short blocking dealy is necessary, as a reset for the stripe to show the colours (s. Nick Gammon).

After showing the LED have to be set to 0 again.</documentation>
      <entry brief="calculate LED, snow, erase">// build into in-memory array, as these calculations take too long to do on the fly
for (me-&gt;led_index = random(0U, PIXELS); me-&gt;led_index &lt; PIXELS; me-&gt;led_index = me-&gt;led_index + random(2U, 4U)) {
    pixelArray [me-&gt;led_index].r = 100U;
    pixelArray [me-&gt;led_index].g = 100U;
    pixelArray [me-&gt;led_index].b = random(100U, 255U);
}

// now show results
QF_INT_DISABLE();
for (me-&gt;led_index = 0U; me-&gt;led_index &lt; PIXELS; me-&gt;led_index++) {
    sendPixel (pixelArray [me-&gt;led_index].r, pixelArray [me-&gt;led_index].g, pixelArray [me-&gt;led_index].b);
}
QF_INT_ENABLE();

show();

for (me-&gt;led_index = 0U; me-&gt;led_index &lt; PIXELS; me-&gt;led_index++) {
    pixelArray [me-&gt;led_index].r = 0U;
    pixelArray [me-&gt;led_index].g = 0U;
    pixelArray [me-&gt;led_index].b = 0U;
}</entry>
      <state_glyph node="17,80,17,8">
       <entry box="1,2,13,4"/>
      </state_glyph>
     </state>
     <state name="run_fwd">
      <documentation>To avoid calculating into negativ numbers the numeral area is shifted.
Then, first build into in-memory array, as these calculations take too long to do on the fly.

Because of the strict timing of the SPI bus while sending the colour values to the whole LED stripe, the interrupts has to be shut off. At the end of the sending, a short blocking dealy is necessary, as a reset for the stripe to show the colours (s. Nick Gammon).

At exit, the processed LED is incremented.
If the processed LED reaches the end of the stripe, the direction flag is set true to change the direction and the running_bwd state is prepared.</documentation>
      <entry brief="calculate LED, run LED">// build into in-memory array, as these calculations take too long to do on the fly
// calculate with shifted 0 and PIXELS
for (me-&gt;led_index = zero; me-&gt;led_index &lt;= (uint16_t)pixels - me-&gt;run_nr; me-&gt;led_index++) {
/* compiler warning: &quot;comparison between signed and unsigned integer expressions&quot;,
if pixels isn't castet */
    if (me-&gt;led_index == me-&gt;run_x) {
        for (me-&gt;run_nr_index = 0U; me-&gt;run_nr_index &lt; me-&gt;run_nr;
            me-&gt;run_nr_index++, me-&gt;led_index++) {
                // address the absolute, not shifted LED
                pixelArray [me-&gt;led_index - PIXELS - 1U].r = me-&gt;red;
                pixelArray [me-&gt;led_index - PIXELS - 1U].g = me-&gt;green;
                pixelArray [me-&gt;led_index - PIXELS - 1U].b = me-&gt;blue;
        }
        me-&gt;led_index--; // otherwise led_index would be two times counted
    }
    else {
        // address the absolute, not shifted LED
        pixelArray [me-&gt;led_index - PIXELS - 1U].r = 0U;
        pixelArray [me-&gt;led_index - PIXELS - 1U].g = 0U;
        pixelArray [me-&gt;led_index - PIXELS - 1U].b = 0U;
    }
}

// now show results
QF_INT_DISABLE();
// address the absolute, not shifted LED
for (me-&gt;led_index = 0U; me-&gt;led_index &lt; PIXELS; me-&gt;led_index++) {
    sendPixel (pixelArray [me-&gt;led_index].r, pixelArray [me-&gt;led_index].g, pixelArray [me-&gt;led_index].b);
}
QF_INT_ENABLE();

show();</entry>
      <exit brief="inc processed LED, check run direction">if (me-&gt;run_x &lt; (uint16_t)pixels - me-&gt;run_nr) {
/* compiler warning: &quot;comparison between signed and unsigned integer expressions&quot;,
if pixels isn't castet */
    me-&gt;run_x++;
}
else {
    me-&gt;run_bwd = 1U;
    me-&gt;run_x = pixels; // initialization for run_bwd
}</exit>
      <state_glyph node="17,90,17,12">
       <entry box="1,2,13,5"/>
       <exit box="1,7,16,4"/>
      </state_glyph>
     </state>
     <state name="run_bwd">
      <documentation>To avoid calculating into negativ numbers the numeral area is shifted.
Then, first build into in-memory array, as these calculations take too long to do on the fly.

Because of the strict timing of the SPI bus while sending the colour values to the whole LED stripe, the interrupts has to be shut off. At the end of the sending, a short blocking dealy is necessary, as a reset for the stripe to show the colours (s. Nick Gammon).

At exit, the processed LED is decremented.
If the processed LED reaches the begin of the stripe, the direction flag is set false to change the direction and the running_fwd state is prepared.</documentation>
      <entry brief="calculate LED, run LED">// build into in-memory array, as these calculations take too long to do on the fly
// calculate with shifted 0 and PIXELS
for (me-&gt;led_index = pixels; me-&gt;led_index &gt;= me-&gt;run_nr + (uint16_t)zero; me-&gt;led_index--) {
/* compiler warning: &quot;comparison between signed and unsigned integer expressions&quot;,
if zero isn't castet */
    if (me-&gt;led_index == me-&gt;run_x) {
        for (me-&gt;run_nr_index = me-&gt;run_nr;  me-&gt;run_nr_index &gt; 0U;
            me-&gt;run_nr_index--, me-&gt;led_index--) {
                // address the absolute, not shifted LED
                pixelArray [me-&gt;led_index - PIXELS - 2U].r = me-&gt;red;
                pixelArray [me-&gt;led_index - PIXELS - 2U].g = me-&gt;green;
                pixelArray [me-&gt;led_index - PIXELS - 2U].b = me-&gt;blue;
        }
        me-&gt;led_index++; // otherwise led_index would be two times counted
    }
    else {
        // address the absolute, not shifted LED
        pixelArray [me-&gt;led_index - PIXELS - 2U].r = 0U;
        pixelArray [me-&gt;led_index - PIXELS - 2U].g = 0U;
        pixelArray [me-&gt;led_index - PIXELS - 2U].b = 0U;
    }
}

// now show results
QF_INT_DISABLE();
// address the absolute, not shifted LED
for (me-&gt;led_index = 0U; me-&gt;led_index &lt; PIXELS; me-&gt;led_index++) {
    sendPixel (pixelArray [me-&gt;led_index].r, pixelArray [me-&gt;led_index].g, pixelArray [me-&gt;led_index].b);
}
QF_INT_ENABLE();

show();</entry>
      <exit brief="dec processed LED, check run direction">if (me-&gt;run_x &gt; me-&gt;run_nr + (uint16_t)zero) {
/* compiler warning: &quot;comparison between signed and unsigned integer expressions&quot;,
if zero isn't castet */
    me-&gt;run_x--;
}
else {
    me-&gt;run_bwd = 0U;
    me-&gt;run_x = zero; // initialization for run_fwd
}</exit>
      <state_glyph node="17,104,17,12">
       <entry box="1,2,13,5"/>
       <exit box="1,7,16,4"/>
      </state_glyph>
     </state>
     <state_glyph node="4,3,32,119">
      <entry box="1,2,30,5"/>
      <exit box="1,7,21,2"/>
     </state_glyph>
    </state>
    <state name="communication">
     <documentation>The communication is designed as a handshake, because of its asynchronous nature. A timer is cyclic started. If it shoots, the receive buffer is checked for the start sign. If the start sign is detected, the processing of the data starts. If not, it is checked whether to much tries are done. If so, the communication is aborted and its going back to the LED remote branch.</documentation>
     <entry brief="start communication tick">QActive_armX((QActive *)me, 0U, COMMUNICATION_TICK, 0U);</entry>
     <exit brief="stop communication tick">QActive_disarmX((QActive *)me, 0U);</exit>
     <tran trig="Q_TIMEOUT">
      <action brief="inc com_counter">me-&gt;com_counter++;</action>
      <choice target="../../2">
       <guard brief="detect_start_sign">Serial.read() == '&lt;'</guard>
       <action brief="reset value">me-&gt;value = 0U;</action>
       <choice_glyph conn="54,30,5,3,18">
        <action box="1,-4,14,4"/>
       </choice_glyph>
      </choice>
      <choice>
       <guard>else</guard>
       <choice>
        <guard brief="check_communication">me-&gt;com_counter &gt; 10U</guard>
        <action brief="stop communication">QACTIVE_POST((QActive *)me, STOP_SIG, 0U);
digitalWrite(DEBUG_L, HIGH);</action>
        <choice_glyph conn="54,36,4,-1,6">
         <action box="0,1,17,4"/>
        </choice_glyph>
       </choice>
       <choice target="../../..">
        <guard>else</guard>
        <choice_glyph conn="54,36,5,3,-16,-16,2">
         <action box="-6,-2,6,2"/>
        </choice_glyph>
       </choice>
       <choice_glyph conn="54,30,4,-1,6">
        <action box="0,1,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="40,30,3,-1,14">
       <action box="0,-4,13,4"/>
      </tran_glyph>
     </tran>
     <tran trig="STOP" target="../../1">
      <tran_glyph conn="90,45,1,3,-52,79,-36,-117,2">
       <action box="-5,-2,6,2"/>
      </tran_glyph>
     </tran>
     <state name="process_data">
      <documentation>To process the message char by char, the value has to be transmitted first, because it is asigned with the following colour or program order.

Data format of the communication = &lt;XY&gt; (all type of char)
&lt; = start sign
X = value
Y = colour, program
&gt; = stop sign

With the detecting of the stop sign, it is changed back to the branch state with its LED control programs.

On exit an acknowledge is send to the handy.</documentation>
      <entry brief="value, colour, program, stop sign">while (Serial.available()) {
    uint8_t data = Serial.read();
    switch (data) {
        case '0' ... '9':
            me-&gt;value *= 10U;
            me-&gt;value += data - '0';
            break;
        case 'r':
            me-&gt;red = me-&gt;value;
            break;
        case 'g':
            me-&gt;green = me-&gt;value;
            break;
        case 'b':
            me-&gt;blue = me-&gt;value;
            break;
        case 'p':
            me-&gt;program = me-&gt;value;
            break;
        case '&gt;':
            QACTIVE_POST((QActive *)me, STOP_SIG, 0U);
            break;
    }
}</entry>
      <exit brief="acknowledge communication">Serial.print(F(&quot;A&quot;));</exit>
      <state_glyph node="72,28,16,13">
       <entry box="1,2,14,5"/>
       <exit box="1,7,12,4"/>
      </state_glyph>
     </state>
     <state_glyph node="40,16,50,31">
      <entry box="1,2,20,4"/>
      <exit box="1,6,21,2"/>
     </state_glyph>
    </state>
    <state_diagram size="92,126"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="LEDviaApp.ino">
   <text>#include &quot;qpn.h&quot;                       // QP-nano framework
#include &quot;Arduino.h&quot;                   // Arduino API

#include &lt;NeoPixels_SPI.h&gt;             // from Nick Gammon
#include &lt;SPI.h&gt;                       // Pin 11 = MOSI

//============================================================================
// declare all AO classes...
$declare(AOs::LEDviaApp)
//...

// AO instances and event queue buffers for them...
LEDviaApp AO_LEDviaApp;
static QEvt l_ledviaappQSto[10];       // Event queue storage for LEDviaApp
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,             (QEvt *)0,       0U                     },
    { (QActive *)&amp;AO_LEDviaApp, l_ledviaappQSto, Q_DIM(l_ledviaappQSto) }
};

//============================================================================
// various constants for the application...
enum {
// number of system clock ticks in one second
    BSP_TICKS_PER_SEC      = 100U,

// handshake and program timing = 20 ms
    COMMUNICATION_TICK     = BSP_TICKS_PER_SEC / 5U,

// max 256 PIXELS possible, else some Class Attribute types has to be adjusted
//    PIXELS = 120,                      // number of LEDs in the stripe
    PIXELS = 8U,                       // number of LED in the stick

// shift 0 to 'zero' for never calculating below 0
    zero = PIXELS + 1U,                // shift 0 to avoid coming below 0
    pixels = 2U * PIXELS + 1U,         // has also to be shifted

    BLUETOOTH_POWER = 4,               // pin of the transistor base

    DEBUG_L = 9                        // pin of debug LED
};

// various signals for the application...
enum {
    STOP_SIG            = Q_USER_SIG,  // end of data
    COMMUNICATION_SIG,                 // communication request
    COLOUR_SIG,                        // display colour
    DIM_SIG,                           // dim animation
    RAINBOW_SIG,                       // rainbow animation
    FLASH_SIG,                         // colour flash animation
    SPLASH_SIG,                        // colour splash animation
    SNOW_SIG,                          // snow animation
    RUN_SIG                            // run light animation
};

// store the rainbox in memory (from Nick Gammon)
// WARNING! 3 bytes per pixel - take care you don't exceed available RAM
colour pixelArray [PIXELS];

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_LEDviaApp.super, Q_STATE_CAST(&amp;LEDviaApp_initial));

    // initialize the hardware used in this sketch...
    pinMode(DEBUG_L, OUTPUT);          // set the DEBUG_LED pin to output

    pinMode(BLUETOOTH_POWER, OUTPUT);  // pin mode of the transistor control
    delay(3000);                       // switch on delay for program upload
    digitalWrite(BLUETOOTH_POWER, HIGH); // switch on the Bluetooth module

    // set the highest standard baud rate of 115200 bps
    Serial.begin(115200);

    ledsetup();                        // setup SPI
    showColor(PIXELS, 0U, 0U, 0U);     // all LED off
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER2_COMPA_vect) {
    QF_tickXISR(0U); // process time events for tick rate 0
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
    TCCR2A = (1U &lt;&lt; WGM21) | (0U &lt;&lt; WGM20);
    TCCR2B = (1U &lt;&lt; CS22 ) | (1U &lt;&lt; CS21) | (1U &lt;&lt; CS20); // 1/2^10
    ASSR  &amp;= ~(1U &lt;&lt; AS2);
    TIMSK2 = (1U &lt;&lt; OCIE2A); // enable TIMER2 compare Interrupt
    TCNT2  = 0U;

    // set the output-compare register based on the desired tick frequency
    OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}

//............................................................................
void QV_onIdle(void) { // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP(); // atomically go to sleep and enable interrupts
}

//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET(); // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
$define(AOs::LEDviaApp)
//...</text>
  </file>
 </directory>
</model>
