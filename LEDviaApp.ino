/*****************************************************************************
* Model: LEDviaApp.qm
* File:  ./LEDviaApp.ino
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${.::LEDviaApp.ino} ......................................................*/
#include "qpn.h"                       // QP-nano framework
#include "Arduino.h"                   // Arduino API

#include <NeoPixels_SPI.h>             // from Nick Gammon
#include <SPI.h>                       // Pin 11 = MOSI

//============================================================================
// declare all AO classes...

#if ((QP_VERSION < 580) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpn version 5.8.0 or higher required
#endif

/*${AOs::LEDviaApp} ........................................................*/
typedef struct LEDviaApp {
/* protected: */
    QActive super;

/* private: */
    uint8_t wert;
    uint8_t rot;
    uint8_t gruen;
    uint8_t blau;
    uint8_t programm;
    uint8_t led_index;
    uint8_t led_x;
    uint8_t helligkeit;
} LEDviaApp;

/* protected: */
static QState LEDviaApp_initial(LEDviaApp * const me);
static QState LEDviaApp_Verzweigung(LEDviaApp * const me);
static QState LEDviaApp_Kommunikation(LEDviaApp * const me);
static QState LEDviaApp_Datenverarbeitung(LEDviaApp * const me);
static QState LEDviaApp_Anzeige(LEDviaApp * const me);
static QState LEDviaApp_Lauflicht(LEDviaApp * const me);
static QState LEDviaApp_Dimmen(LEDviaApp * const me);

//...

// AO instances and event queue buffers for them...
LEDviaApp AO_LEDviaApp;
static QEvt l_ledviaappQSto[10]; // Event queue storage for LEDviaApp
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,             (QEvt *)0,       0U                     },
    { (QActive *)&AO_LEDviaApp, l_ledviaappQSto, Q_DIM(l_ledviaappQSto) }
};

//============================================================================
// various constants for the application...
enum {
// number of system clock ticks in one second
    BSP_TICKS_PER_SEC       = 100,

    // verschiedene Timer
    KOMMUNIKATIONSTIMER     = BSP_TICKS_PER_SEC / 5U,
    LAUFLICHTTAKT           = BSP_TICKS_PER_SEC,
    DIMMENTAKT              = BSP_TICKS_PER_SEC / 20U,

    PIXELS = 8,                        // Anzahl der LEDs des NeoPixel-Stick
    BLUETOOTH_POWER = 4,

    STOPP_SIG,                         // Datenende

    KOMMUNIKATION_SIG,
    ANZEIGE_SIG,
    LAUFLICHT_SIG,
    DIMMEN_SIG,

    DEBUG_LED = 7                      // LED zur Fehlersuche
};

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&AO_LEDviaApp.super, Q_STATE_CAST(&LEDviaApp_initial));

    // initialize the hardware used in this sketch...
    pinMode(DEBUG_LED, OUTPUT); // set the DEBUG_LED pin to output

    pinMode(BLUETOOTH_POWER, OUTPUT);  // Bluetooth ein/aus
    delay(3000); // verzögert einschalten um uploads durchführen zu können
    digitalWrite(BLUETOOTH_POWER, HIGH); // Bluetooth einschalten

    Serial.begin(115200); // set the highest standard baud rate of 115200 bps

    ledsetup();                        // Setup SPI
    showColor(PIXELS, 0, 0, 0);        // alle Led aus
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER2_COMPA_vect) {
    QF_tickXISR(0U); // process time events for tick rate 0
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {
    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking...
    TCCR2A = (1U << WGM21) | (0U << WGM20);
    TCCR2B = (1U << CS22 ) | (1U << CS21) | (1U << CS20); // 1/2^10
    ASSR  &= ~(1U << AS2);
    TIMSK2 = (1U << OCIE2A); // enable TIMER2 compare Interrupt
    TCNT2  = 0U;

    // set the output-compare register based on the desired tick frequency
    OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
}

//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 << SM0) | (1 << SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}

//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
/*${AOs::LEDviaApp} ........................................................*/
/*${AOs::LEDviaApp::SM} ....................................................*/
static QState LEDviaApp_initial(LEDviaApp * const me) {
    /* ${AOs::LEDviaApp::SM::initial} */
    return Q_TRAN(&LEDviaApp_Verzweigung);
}
/*${AOs::LEDviaApp::SM::Verzweigung} .......................................*/
static QState LEDviaApp_Verzweigung(LEDviaApp * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::LEDviaApp::SM::Verzweigung} */
        case Q_ENTRY_SIG: {
            if (Serial.read() == 'R') {
                Serial.print(F("T"));
                QACTIVE_POST((QActive *)me, KOMMUNIKATION_SIG, 0U);
            }
            else {
                if (me->programm == 1)
                    QACTIVE_POST((QActive *)me, ANZEIGE_SIG, 0U);
                else if (me->programm == 2)
                    QACTIVE_POST((QActive *)me, LAUFLICHT_SIG, 0U);
                else if (me->programm == 3)
                    QACTIVE_POST((QActive *)me, DIMMEN_SIG, 0U);
                else
                    QACTIVE_POST((QActive *)me, ANZEIGE_SIG, 0U);
            }
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::LEDviaApp::SM::Verzweigung::KOMMUNIKATION} */
        case KOMMUNIKATION_SIG: {
            status_ = Q_TRAN(&LEDviaApp_Kommunikation);
            break;
        }
        /* ${AOs::LEDviaApp::SM::Verzweigung::ANZEIGE} */
        case ANZEIGE_SIG: {
            status_ = Q_TRAN(&LEDviaApp_Anzeige);
            break;
        }
        /* ${AOs::LEDviaApp::SM::Verzweigung::LAUFLICHT} */
        case LAUFLICHT_SIG: {
            status_ = Q_TRAN(&LEDviaApp_Lauflicht);
            break;
        }
        /* ${AOs::LEDviaApp::SM::Verzweigung::DIMMEN} */
        case DIMMEN_SIG: {
            status_ = Q_TRAN(&LEDviaApp_Dimmen);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::LEDviaApp::SM::Kommunikation} .....................................*/
static QState LEDviaApp_Kommunikation(LEDviaApp * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::LEDviaApp::SM::Kommunikation} */
        case Q_ENTRY_SIG: {
            QActive_armX((QActive *)me, 0U, KOMMUNIKATIONSTIMER, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::LEDviaApp::SM::Kommunikation} */
        case Q_EXIT_SIG: {
            QActive_disarmX((QActive *)me, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::LEDviaApp::SM::Kommunikation::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            /* ${AOs::LEDviaApp::SM::Kommunikation::Q_TIMEOUT::[Startzeichen-Erkennung]} */
            if (Serial.read() == '<') {
                me->wert = 0U;
                status_ = Q_TRAN(&LEDviaApp_Datenverarbeitung);
            }
            else {
                status_ = Q_UNHANDLED();
            }
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::LEDviaApp::SM::Kommunikation::Datenverarbeitung} ..................*/
static QState LEDviaApp_Datenverarbeitung(LEDviaApp * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::LEDviaApp::SM::Kommunikation::Datenverarbeitung} */
        case Q_ENTRY_SIG: {
            while (Serial.available()) {
                uint8_t daten = Serial.read();
                switch (daten) {
                    case '0' ... '9':
                        me->wert *= 10;
                        me->wert += daten - '0';
                        break;
                    case 'r':
                        me->rot = me->wert;
                        break;
                    case 'g':
                        me->gruen = me->wert;
                        break;
                    case 'b':
                        me->blau = me->wert;
                        break;
                    case 'p':
                        me->programm = me->wert;
                        break;
                    case '>':
                        QACTIVE_POST((QActive *)me, STOPP_SIG, 0U);
                        break;
                }
            }
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::LEDviaApp::SM::Kommunikation::Datenverarbeitun~::STOPP} */
        case STOPP_SIG: {
            Serial.print(F("A"));
            status_ = Q_TRAN(&LEDviaApp_Verzweigung);
            break;
        }
        default: {
            status_ = Q_SUPER(&LEDviaApp_Kommunikation);
            break;
        }
    }
    return status_;
}
/*${AOs::LEDviaApp::SM::Anzeige} ...........................................*/
static QState LEDviaApp_Anzeige(LEDviaApp * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::LEDviaApp::SM::Anzeige} */
        case Q_ENTRY_SIG: {
            showColor(PIXELS, me->rot, me->gruen, me->blau);

            QActive_armX((QActive *)me, 0U, KOMMUNIKATIONSTIMER, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::LEDviaApp::SM::Anzeige} */
        case Q_EXIT_SIG: {
            QActive_disarmX((QActive *)me, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::LEDviaApp::SM::Anzeige::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&LEDviaApp_Verzweigung);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::LEDviaApp::SM::Lauflicht} .........................................*/
static QState LEDviaApp_Lauflicht(LEDviaApp * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::LEDviaApp::SM::Lauflicht} */
        case Q_ENTRY_SIG: {
            if (me->led_index == PIXELS) {
                me->led_index = 0U;
                }

            QF_INT_DISABLE();
            for (me->led_x = 0U; me->led_x < PIXELS; me->led_x++) {
                if (me->led_x == me->led_index) {
                    sendPixel(me->rot, me->gruen, me->blau);
                    }
                else {
                    sendPixel(0U, 0U, 0U);
                    }
            }
            QF_INT_ENABLE();

            show();

            me->led_index++;

            QActive_armX(&me->super, 0U, LAUFLICHTTAKT, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::LEDviaApp::SM::Lauflicht} */
        case Q_EXIT_SIG: {
            QActive_disarmX((QActive *)me, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::LEDviaApp::SM::Lauflicht::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&LEDviaApp_Verzweigung);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::LEDviaApp::SM::Dimmen} ............................................*/
static QState LEDviaApp_Dimmen(LEDviaApp * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::LEDviaApp::SM::Dimmen} */
        case Q_ENTRY_SIG: {
            showColor(PIXELS,
                me->rot / 255.0 * me->helligkeit,
                me->gruen / 255.0 * me->helligkeit,
                me->blau / 255.0 * me->helligkeit);

            me->helligkeit = me->helligkeit + 4U;

            QActive_armX(&me->super, 0U, DIMMENTAKT, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::LEDviaApp::SM::Dimmen} */
        case Q_EXIT_SIG: {
            QActive_disarmX((QActive *)me, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::LEDviaApp::SM::Dimmen::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&LEDviaApp_Verzweigung);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}

//...

